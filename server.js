require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const session = require('express-session');
const axios = require('axios');
const path = require('path');

const app = express();

// üìå –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
console.log("MongoDB URI:", process.env.MONGODB_URI);
console.log("Poster Client ID:", process.env.POSTER_CLIENT_ID);
console.log("Redirect URI:", process.env.REDIRECT_URI);

// üìå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect(process.env.MONGODB_URI)
    .then(() => {
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');
    })
    .catch(err => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', err);
    });

// üìå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ–π
app.use(session({
    secret: process.env.SESSION_SECRET || 'defaultsecret',
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false } // –£ production –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ true —ñ –¥–æ–¥–∞—Ç–∏ HTTPS
}));

// üìå –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.use(express.static(path.join(__dirname, 'public')));

// üìå –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
app.get('/', (req, res) => {
    res.send('<h1>Poster API Auth</h1><a href="/auth">–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è</a>');
});

// üìå –†–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é Poster
app.get('/auth', (req, res) => {
    const authUrl = `https://joinposter.com/api/auth?client_id=${process.env.POSTER_CLIENT_ID}&response_type=code&redirect_uri=${encodeURIComponent(process.env.REDIRECT_URI)}`;
    res.redirect(authUrl);
});

// üìå –û–±—Ä–æ–±–∫–∞ –∫–æ–ª–±–µ–∫—É –ø—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
app.get('/auth/callback', async (req, res) => {
    const { code, account } = req.query;

    if (!code || !account) {
        return res.status(400).send('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–æ–¥ –∞–±–æ –∞–∫–∞—É–Ω—Ç');
    }

    console.log("üì• Callback Params:", { code, account });
    console.log("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è access_token...");

    try {
        console.log("Application ID:", process.env.POSTER_CLIENT_ID); // –í–∏–≤–µ–¥–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è POSTER_CLIENT_ID –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

        const tokenResponse = await axios.post('https://joinposter.com/api/v2/auth/manage', null, {
            params: {
                application_id: process.env.POSTER_CLIENT_ID,  // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–µ
                application_secret: process.env.POSTER_CLIENT_SECRET,
                grant_type: 'authorization_code',
                redirect_uri: process.env.REDIRECT_URI,
                code: code
            }
        });

        console.log("‚úÖ Token Response:", tokenResponse.data);

        req.session.accessToken = tokenResponse.data.access_token;
        req.session.account = account;

        res.send('<h2>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!</h2><a href="/profile">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é</a>');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error.response ? error.response.data : error.message);
        res.status(500).send('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.');
    }
});

// üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get('/profile', async (req, res) => {
    if (!req.session.accessToken) {
        return res.status(401).send('‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π. <a href="/auth">–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è</a>');
    }

    try {
        const profileResponse = await axios.post(`https://joinposter.com/api/v2/auth/info`, null, {
            params: { token: req.session.accessToken }
        });

        res.json(profileResponse.data);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', error.response ? error.response.data : error.message);
        res.status(500).send('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.');
    }
});

// üìå –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ http://localhost:${PORT}`);
});
